DELIMITER $$

USE `passcenter`$$

DROP PROCEDURE IF EXISTS `InserirPresenca2`$$

CREATE PROCEDURE `InserirPresenca2`(IN vEau_codigo INT, IN vPes_codigo INT, IN list_of_ids TEXT, IN vPre_horario_entrada DATETIME, IN vPre_horario_saida DATETIME, IN vSes_codigo INT)
BEGIN
			-- Declaracoes
			DECLARE _ide_identificador INT;
			DECLARE _totalUsers INT;
			DECLARE i INT;
			DECLARE total INT;
			DECLARE fim INT DEFAULT 0;
			-- inicializacao
			SET i = 0;
			SET total = 0;
			
			-- Criando Tabela temporaria e realizando insercao dos IDs que não devem receber presencas
			CREATE TEMPORARY TABLE IF NOT EXISTS participantes_ausentes(id TEXT);
			SET @sql = CONCAT('insert into participantes_ausentes (id) values',list_of_ids,'');
			PREPARE stmt1 FROM @sql;
			EXECUTE stmt1;
		
		BEGIN
			-- Declaracao do Cursor
			DECLARE c1 CURSOR FOR SELECT ide_identificador, COUNT(*) FROM turmas
			INNER JOIN eventos_auditores eau USING (eau_codigo)
			INNER JOIN usuarios usu USING (usu_codigo)
			INNER JOIN identificadores USING (usu_codigo)
			WHERE eau_codigo = vEau_codigo AND eau.pes_codigo = vPes_codigo 
			AND usu.usu_codigo NOT IN (SELECT * FROM participantes_ausentes)
			GROUP BY ide_identificador;			
			DECLARE CONTINUE HANDLER FOR NOT FOUND SET fim=1;
			SET fim = 0;
			
			OPEN c1;
			ideLoop:LOOP	
					-- varrendo registro por registro
					FETCH c1 INTO _ide_identificador, _totalUsers;
					IF fim = 1 THEN LEAVE ideLoop; END IF;
					-- Inserindo presenca
					INSERT INTO presencas VALUES (vSes_codigo, _ide_identificador, vPre_horario_entrada, vPre_horario_saida, 0);
			END LOOP ideLoop;
			CLOSE c1;
            
            -- Deletando tabela temporaria
            DROP TEMPORARY TABLE participantes_ausentes;
        END;
	END$$

DELIMITER ;